{"version":3,"sources":["webpack://nabrosok-2021/./src/pages/artists/[id].tsx","webpack://nabrosok-2021/./src/shared/utils/decl-of-num.ts","webpack://nabrosok-2021/./src/ui/atoms/typography/typography.tsx","webpack://nabrosok-2021/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://nabrosok-2021/./src/ui/atoms/container/container.tsx","webpack://nabrosok-2021/./src/ui/atoms/page-wrapper/page-wrapper.tsx","webpack://nabrosok-2021/./src/ui/templates/work-template/work-template.tsx","webpack://nabrosok-2021/./src/ui/templates/artist-template/artist-template.tsx"],"names":["ArtistDetails","location","splitPath","pathname","split","id","Number","length","works","artistsJSON","data","name","age","biography","genre","email","vk","instagram","declensions","StyledText","styled","styles","css","variantMap","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","button","caption","overline","marginMap","mt","mb","ml","mr","mx","my","m","Typography","variant","color","children","props","source","excluded","key","i","target","sourceKeys","Object","keys","indexOf","theme","useTheme","textTag","textStyles","typography","textColor","margins","entries","reduce","acc","item","value","pixels","SPACING_SIZE","cssPrefix","marginValue","getMargins","as","Container","PageWrapper","palette","primary","main","ContentWrapper","spacing","background","default","PhotoWrapper","breakpoints","sm","PhotoImage","NameText","common","black","white","WorkTemplate","imageUrl","artistId","description","year","src","alt","declFormatters","amount","ArtistTemplate","href"],"mappings":"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","file":"component---src-pages-artists-[id]-tsx-a5c1ef0de7df5fb9f6aa.js","sourcesContent":["import React from 'react';\r\n\r\nimport artistsJSON from '@data/artists.json';\r\nimport type { TArtist } from '@data/types';\r\nimport { ArtistTemplate } from '@ui/templates';\r\n\r\ntype Props = {\r\n  location: any;\r\n};\r\n\r\nexport const ArtistDetails: React.FC<Props> = ({ location }) => {\r\n  const splitPath = location?.pathname?.split('/');\r\n  const id = Number(splitPath[splitPath.length - 1]);\r\n  //@ts-ignore\r\n  const works: Record<string, TArtist> = artistsJSON;\r\n  const data = works?.[id];\r\n\r\n  if (!id || !data) {\r\n    return <p>Ooops :(</p>;\r\n  }\r\n  return (\r\n    <ArtistTemplate\r\n      name={data.name}\r\n      age={data.age}\r\n      biography={data.biography}\r\n      genre={data.genre}\r\n      email={data.email}\r\n      vk={data.vk}\r\n      instagram={data.instagram}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ArtistDetails;\r\n","export const declOfNum = (declensions: [string, string, string]) => (amount: number) => {\r\n  const cases = [2, 0, 1, 1, 1, 2];\r\n  const isManyDeclension = amount % 100 > 4 && amount % 100 < 20;\r\n  return declensions[isManyDeclension ? 2 : cases[amount % 10 < 5 ? amount % 10 : 5]];\r\n};\r\n\r\nconst age = declOfNum(['год', 'года', 'лет']);\r\n\r\nexport const declFormatters = {\r\n  age,\r\n};\r\n","import React from 'react';\r\nimport styled, { useTheme, css } from 'styled-components';\r\n\r\nimport { SPACING_SIZE } from '@ui/theme/helpers';\r\n\r\nimport { TTextVariant } from './types';\r\n\r\nconst StyledText = styled.p<{ styles?: React.CSSProperties }>`\r\n  ${({ styles }) => styles && css({ ...styles })}\r\n`;\r\n\r\nconst variantMap: Record<TTextVariant, string> = {\r\n  h1: 'h1',\r\n  h2: 'h2',\r\n  h3: 'h3',\r\n  h4: 'h4',\r\n  h5: 'h5',\r\n  h6: 'h6',\r\n  subtitle1: 'h6',\r\n  subtitle2: 'h6',\r\n  body1: 'p',\r\n  body2: 'p',\r\n  button: 'span',\r\n  caption: 'p',\r\n  overline: 'span',\r\n};\r\n\r\ntype TTextMargin = {\r\n  mt?: number;\r\n  mb?: number;\r\n  ml?: number;\r\n  mr?: number;\r\n  mx?: number;\r\n  my?: number;\r\n  m?: number;\r\n};\r\n\r\nconst marginMap: Record<keyof TTextMargin, string> = {\r\n  mt: 'marginTop',\r\n  mb: 'marginBottom',\r\n  ml: 'marginLeft',\r\n  mr: 'marginRight',\r\n  mx: 'margin',\r\n  my: 'margin',\r\n  m: 'margin',\r\n};\r\n\r\ntype TCSSMargins = Pick<\r\n  React.CSSProperties,\r\n  'margin' | 'marginRight' | 'marginLeft' | 'marginBottom' | 'marginTop'\r\n>;\r\n\r\nconst getMargins = (margins: TTextMargin) => {\r\n  const data = Object.entries(margins).reduce(\r\n    (acc, item: [string, number | undefined]) => {\r\n      const [key, value] = item;\r\n      if (value) {\r\n        const pixels = `${value * SPACING_SIZE}px`;\r\n        const cssPrefix = marginMap[key as keyof TTextMargin];\r\n        let marginValue = '';\r\n        switch (true) {\r\n          case key === 'mx': {\r\n            marginValue = `0 ${pixels}`;\r\n            break;\r\n          }\r\n          case key === 'my': {\r\n            marginValue = `${pixels} 0`;\r\n            break;\r\n          }\r\n          default: {\r\n            marginValue = pixels;\r\n          }\r\n        }\r\n        return { ...acc, [cssPrefix]: marginValue };\r\n      }\r\n      return acc;\r\n    },\r\n    {} as any,\r\n  );\r\n  return data as TCSSMargins;\r\n};\r\n\r\ntype Props = {\r\n  variant?: TTextVariant;\r\n  color?: string;\r\n} & TTextMargin;\r\n\r\nexport const Typography: React.FC<Props> = ({\r\n  variant = 'body2',\r\n  color,\r\n  mt,\r\n  mb,\r\n  ml,\r\n  mr,\r\n  mx,\r\n  my,\r\n  m,\r\n  children,\r\n  ...props\r\n}) => {\r\n  const theme = useTheme();\r\n  const textTag = variantMap[variant] as keyof JSX.IntrinsicElements;\r\n  const textStyles = theme.typography[variant] as React.CSSProperties;\r\n  const textColor = color ?? textStyles.color;\r\n\r\n  const margins = getMargins({ mt, mb, ml, mr, mx, my, m });\r\n  const styles = { ...textStyles, color: textColor, ...margins };\r\n\r\n  return (\r\n    <StyledText styles={styles} as={textTag} {...props}>\r\n      {children}\r\n    </StyledText>\r\n  );\r\n};\r\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  height: 100%;\r\n  max-width: 700px;\r\n  margin: auto;\r\n  overflow-y: auto;\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const PageWrapper = styled.div`\r\n  height: 100vh;\r\n  background-color: ${({ theme }) => theme.palette.primary.main};\r\n`;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Container, PageWrapper, Typography } from '@ui/atoms';\r\n\r\nconst ContentWrapper = styled.div`\r\n  min-height: ${({ theme }) => `calc(100% - ${theme.spacing(4)}px);`};\r\n  background-color: ${({ theme }) => theme.palette.background.default};\r\n  margin: ${({ theme }) => theme.spacing(2)}px 0;\r\n  padding: ${({ theme }) => theme.spacing(2)}px;\r\n`;\r\nconst PhotoWrapper = styled.div`\r\n  height: 480px;\r\n  max-width: 480px;\r\n  margin: 0 auto ${({ theme }) => theme.spacing(2)}px;\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoints.sm}px) {\r\n    height: 320px;\r\n  }\r\n`;\r\nconst PhotoImage = styled.img`\r\n  height: 100%;\r\n  width: 100%;\r\n  object-fit: cover;\r\n`;\r\nconst NameText = styled(Typography)`\r\n  background-color: ${({ theme }) => theme.palette.common.black};\r\n  color: ${({ theme }) => theme.palette.common.white};\r\n  word-break: break-word;\r\n`;\r\n\r\ntype Props = {\r\n  imageUrl: string;\r\n  artistId: number;\r\n  name?: string;\r\n  description?: string;\r\n  genre?: string;\r\n  year?: string;\r\n};\r\n\r\nexport const WorkTemplate: React.FC<Props> = ({\r\n  imageUrl,\r\n  artistId,\r\n  name = 'Без названия',\r\n  description,\r\n  genre,\r\n  year,\r\n}) => {\r\n  return (\r\n    <PageWrapper>\r\n      <Container>\r\n        <ContentWrapper>\r\n          {imageUrl && (\r\n            <PhotoWrapper>\r\n              <PhotoImage src={imageUrl} alt={name} />\r\n            </PhotoWrapper>\r\n          )}\r\n          <NameText variant=\"h2\" mb={3}>\r\n            {name}\r\n          </NameText>\r\n          {genre && (\r\n            <Typography variant=\"caption\" mb={2}>\r\n              Жанр: {genre}\r\n            </Typography>\r\n          )}\r\n          {description && (\r\n            <Typography variant=\"body2\" mb={1}>\r\n              {description}\r\n            </Typography>\r\n          )}\r\n          {year && (\r\n            <Typography variant=\"caption\" mb={2}>\r\n              {year}г.\r\n            </Typography>\r\n          )}\r\n        </ContentWrapper>\r\n      </Container>\r\n    </PageWrapper>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Container, PageWrapper, Typography } from '@ui/atoms';\r\nimport { declFormatters } from '@shared/utils';\r\n\r\nconst ContentWrapper = styled.div`\r\n  min-height: ${({ theme }) => `calc(100% - ${theme.spacing(4)}px);`};\r\n  background-color: ${({ theme }) => theme.palette.background.default};\r\n  margin: ${({ theme }) => theme.spacing(2)}px 0;\r\n  padding: ${({ theme }) => theme.spacing(2)}px;\r\n`;\r\nconst PhotoWrapper = styled.div`\r\n  height: 480px;\r\n  max-width: 480px;\r\n  margin: 0 auto ${({ theme }) => theme.spacing(2)}px;\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoints.sm}px) {\r\n    height: 320px;\r\n  }\r\n`;\r\nconst PhotoImage = styled.img`\r\n  height: 100%;\r\n  width: 100%;\r\n  object-fit: cover;\r\n`;\r\nconst NameText = styled(Typography)`\r\n  padding: 0 ${({ theme }) => theme.spacing(1)}px;\r\n  background-color: ${({ theme }) => theme.palette.common.black};\r\n  color: ${({ theme }) => theme.palette.common.white};\r\n  word-break: break-word;\r\n`;\r\n\r\ntype Props = {\r\n  name: string;\r\n  age?: number;\r\n  genre?: string;\r\n  biography?: string;\r\n  email?: string;\r\n  vk?: string;\r\n  instagram?: string;\r\n};\r\n\r\nexport const ArtistTemplate: React.FC<Props> = ({\r\n  name,\r\n  age,\r\n  genre,\r\n  biography,\r\n  email,\r\n  vk,\r\n  instagram,\r\n}) => {\r\n  return (\r\n    <PageWrapper>\r\n      <Container>\r\n        <ContentWrapper>\r\n          <PhotoWrapper>\r\n            <PhotoImage\r\n              src=\"https://cdn1.flamp.ru/6d7599452548820411ed077c7d097c42.jpg\"\r\n              alt={name}\r\n            />\r\n          </PhotoWrapper>\r\n          <NameText variant=\"h3\" mb={2}>\r\n            {name}\r\n          </NameText>\r\n          {age && (\r\n            <Typography variant=\"body2\" mt={2} mb={1}>\r\n              {age} {declFormatters.age(age)}\r\n            </Typography>\r\n          )}\r\n          <Typography variant=\"caption\" mb={2}>\r\n            Жанр: {genre}\r\n          </Typography>\r\n          {biography && <Typography variant=\"body1\">{biography}</Typography>}\r\n          <div>\r\n            {email && <a href={email}>{email}</a>}\r\n            {instagram && <a href={instagram}>{instagram}</a>}\r\n            {vk && <a href={vk}>{vk}</a>}\r\n          </div>\r\n        </ContentWrapper>\r\n      </Container>\r\n    </PageWrapper>\r\n  );\r\n};\r\n"],"sourceRoot":""}